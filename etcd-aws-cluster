#! /bin/bash
set -euo pipefail
IFS=$'\n\t'

pkg="etcd-aws-cluster"
version="0.5"
etcd_peers_file_path="/etc/sysconfig/etcd-peers"

# Allow default client/server ports to be changed if necessary
client_port=${ETCD_CLIENT_PORT:-2379}
server_port=${ETCD_SERVER_PORT:-2380}

# ETCD API https://coreos.com/etcd/docs/latest/members_apis.html
add_ok=201
already_added=409
delete_ok=204

# proxy mode variable to be changed during execution or default is assumed
[[ -z ${PROXY:-} ]] && etcd_proxy=off || etcd_proxy=on

# Allow changing default client/peer scheme
etcd_client_scheme=${ETCD_CLIENT_SCHEME:-http}

etcd_peer_scheme=${ETCD_PEER_SCHEME:-http}

# These will be manipulated by the script in order to generate the environemt
# variables necessary to bootstrap the etcd cluster
etcd_initial_cluster=
etcd_existing_peer_urls=
etcd_existing_peer_names=
etcd_good_member_url=

# if the script has already run just exit
if [ -f "$etcd_peers_file_path" ]; then
    echo "$pkg: etcd-peers file $etcd_peers_file_path already created, exiting"
    exit 0
fi

# The metadata request should always return something.
# We also add a timeout and print the error even in silent mode
function aws_data() {
    [[ -z $1 ]] && echo "path is required to request meta data" && exit 1
    local url="http://169.254.169.254/latest/$1"
    result=$(curl -sSL -m 5 $url)
    [[ -z $result ]] && echo "empty metadata from $url" && exit 2
    echo $result
}

region=$(aws_data dynamic/instance-identity/document | jq --raw-output .region)

ec2_instance_id=$(aws_data meta-data/instance-id)

ec2_instance_ip=$(aws_data meta-data/local-ipv4)

# Get current instance ASG peers
function asg_peers() {
    local asg_name=$(aws autoscaling describe-auto-scaling-instances \
        --region $region \
        --instance-ids $ec2_instance_id \
        --max-items 1 \
        | jq -r '.AutoScalingInstances[].AutoScalingGroupName')

    if [[ -z $asg_name ]]; then
        echo "No AutoScalingGroup for instace=$ec2_instance_id in region=$region"
        exit 3
    fi

    local peer_urls=$(aws ec2 describe-instances
        --region $region \
        --instance-ids $(aws autoscaling describe-auto-scaling-groups \
            --region $region \
            --auto-scaling-group-name $asg_name \
            --max-items 1 \
            | jq '.AutoScalingGroups[].Instances[] | select(.LifecycleState  == "InService") | .InstanceId' | xargs) \
            | jq -r ".Reservations[].Instances | map(\"$etcd_client_scheme://\" + .NetworkInterfaces[].PrivateIpAddress + \":$client_port\")[]")
    if [[ -z $peer_urls ]]; then
        echo "Instance has no peers in current AutoScalingGroup"
        exit 4
    fi
    echo $peer_urls
}

etcd_peer_urls=asg_peers

function scurlf() {
    echo $(curl -sSL -f -m 10 "$*")
}

function members() {
    set +e
    for url in $etcd_peer_urls; do
        case "$url" in
            # If we're in proxy mode this is an error, but unlikely to happen?
            *$ec2_instance_ip*) continue;;
        esac

        etcd_members=$(scurlf $url/v2/members)

        if [[ $? == 0 && ! -z $etcd_members ]]; then
            etcd_good_member_url="$url"
            etcd_existing_peer_urls=$(echo "$etcd_members" | jq --raw-output .[][].peerURLs[0])
            etcd_existing_peer_names=$(echo "$etcd_members" | jq --raw-output .[][].name)
        break
        fi
    done
    set -e
}

# if I am not listed as a member of the cluster assume that this is a existing cluster
# this will also be the case for a proxy situation
if [[ $etcd_existing_peer_urls && $etcd_existing_peer_names != *"$ec2_instance_id"* ]]; then

    # eject bad members from cluster
    peer_regexp=$(echo "$etcd_peer_urls" \
        | sed 's/^.*https\{0,1\}:\/\/\([0-9.]*\):[0-9]*.*$/contains(\\"\/\/\1:\\")/' \
        | xargs | sed 's/  */ or /g')
    if [[ ! $peer_regexp ]]; then
        echo "$pkg: failed to create peer regular expression"
        exit 5
    fi

    bad_peer=$(echo "$etcd_members" | jq -r ".[] | map(select(.peerURLs[] | $peer_regexp | not )) | .[].id")

    if [[ $bad_peer ]]; then
        for bp in $bad_peer; do
            status=$(scurlf -w %{http_code} "$etcd_good_member_url/v2/members/$bp" -XDELETE)
            if [[ $status != $delete_ok ]]; then
                echo "$pkg: ERROR: failed to remove bad peer: $bad_peer, return code $status."
                exit 6
            fi
        done
    fi

    # If we're not a proxy we add ourselves as a member to the cluster
    if [[ -z $PROXY ]]; then
        etcd_initial_cluster=$(scurlf "$etcd_good_member_url/v2/members" \
            | jq -r '.[] | map(.name + "=" + .peerURLs[0]) | .[]' \
            | xargs | sed 's/  */,/g')$(echo ",$ec2_instance_id=${etcd_peer_scheme}://${ec2_instance_ip}:$server_port")
        if [[ ! $etcd_initial_cluster ]]; then
            echo "$pkg: unable to get peers"
            exit 7
        fi

        # join an existing cluster
        status=$(scurlf -w %{http_code} -o /dev/null -XPOST "$etcd_good_member_url/v2/members" \
            -H "Content-Type: application/json" \
            -d "{\"peerURLs\": [\"$etcd_peer_scheme://$ec2_instance_ip:$server_port\"], \"name\": \"$ec2_instance_id\"}")
        if [[ $status != $add_ok && $status != $already_added ]]; then
            echo "$pkg: unable to add $ec2_instance_ip to the cluster: return code $status."
            exit 8
        fi
    # If we are a proxy we just want the list for the actual cluster
    else
        etcd_initial_cluster=$(scurlf "$etcd_good_member_url/v2/members" \
            | jq -r '.[] | map(.name + "=" + .peerURLs[0]) | .[]' | xargs | sed 's/  */,/g')
        if [[ ! $etcd_initial_cluster ]]; then
            echo "$pkg: unable to retrieve initial cluster for proxy"
            exit 9
        fi
    fi

    cat > "$etcd_peers_file_path" <<EOF
ETCD_INITIAL_CLUSTER_STATE=existing
ETCD_NAME=$ec2_instance_id
ETCD_INITIAL_CLUSTER="$etcd_initial_cluster"
ETCD_PROXY=$etcd_proxy
EOF

# otherwise I was already listed as a member so assume that this is a new cluster
else
    # create a new cluster
    etcd_initial_cluster=$etcd_peer_urls
    echo "etcd_initial_cluster=$etcd_initial_cluster"
    if [[ ! $etcd_initial_cluster ]]; then
        echo "$pkg: unable to get peers from auto scaling group"
        exit 10
    fi

    cat > "$etcd_peers_file_path" <<EOF
ETCD_INITIAL_CLUSTER_STATE=new
ETCD_NAME=$ec2_instance_id
ETCD_INITIAL_CLUSTER="$etcd_initial_cluster"
EOF
fi

exit 0
